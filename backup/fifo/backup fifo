`timescale 1ns/1ps

module bram #(
        parameter ADDR_WIDTH = 11,
        parameter DATA_WIDTH = 15
    )
    (

        input clk,
        input wea,
     //   input [ADDR_WIDTH - 1:0] addra,
        input [DATA_WIDTH:0] dina,
        input enb,
     //   input [ADDR_WIDTH - 1:0] addrb, 
        output [DATA_WIDTH:0] doutb,
        output full,
        output empty

    );
    
    localparam DEPTH = 2048;
    
    reg [DATA_WIDTH :0] ram [DEPTH - 1:0];
    reg [DATA_WIDTH:0] doutb_reg;
    reg [12:0] counter;
    reg [11:0] addra,addrb;
    reg [2:0] refc; 
    wire fill;
    

 //   reg [$clog2(DEPTH)-1:0] write_idx, read_idx;
    integer i;



	initial begin
	for(i = 0; i < DEPTH; i = i + 1) begin
					ram[i] = 0;
			  end
		doutb_reg = 0;
		refc=0;
		counter=0;
		addra=0;
		addrb=0;
	end
    
//always@(posedge clk) begin
  
//      case({(wea&&~full),(enb&&~empty)})
        
//        2'b01: begin
//        counter <= counter-12'd1;
//    //    doutb_reg <= ram[addrb];
//        end
//        2'b10: begin
//         counter <= counter+12'd1;
//     //    ram[addra] <= dina;
//         end
        
//        default:  begin
//        counter <= counter; 

//        end
//      endcase
    
//  end
  
    always @(posedge clk) begin

        if (wea && ~full) begin
            ram[addra] <= dina;
            counter<=counter+1;
            addra=addra+1;
        end
        
        
        if(enb && ~empty) begin
            doutb_reg <= ram[addrb];
            counter <= counter-1;
            addrb=addrb+1;
            
        end
        

    end
    
    always @(posedge clk) begin
    if (fill) refc<=refc+1;
    else refc<=refc;
    end
    
    
    assign doutb = doutb_reg;
    assign fill = (counter==DEPTH)?1:0;
    assign  full = refc[0];
    assign empty = (counter==0 && wea==0  )?1:0;
    
    
endmodule

/*
`timescale 1ns / 1ps

module axis_fifo #(
    parameter AW = 12,
    parameter DW = 16,
    parameter DD = 2048)(

      input                  clk,
      input                  rst,

      input    [DW-1   :0]   s_tdata,
      input                  s_tvalid,
      input                  s_tlast,
      output   logic              s_tready,

      output   logic [DW-1   :0]   m_tdata,
      output   logic               m_tvalid,
      output                 m_tlast,
      input                  m_tready
    );
 reg [DW - 1:0] ram [DD - 1:0];
  logic [DW-1 :0] s_tdata_i,m_tdata_i;
  logic [AW:0] read_idx, write_idx;
  logic [AW-1:0] addra, addrb;
  logic enb,wea;
  logic s_tready_i,m_tvalid_i,m_tlast_i;
  logic fifo_full,fifo_empty;

//  bram #(
//         .ADDR_WIDTH(AW),
//         .DATA_WIDTH(DW)
//       ) fifo_1(
//         .clk(clk),
//         .wea(wea),
//         .addra(addra),
//         .dina(s_tdata_i),
//         .enb(enb),
//         .addrb(addrb),
//         .doutb(m_tdata_i),
//         .full(fifo_full),
//         .empty(fifo_empty)
//       );

  always @(*)
  begin
    if (rst || fifo_full)
      s_tready_i <=0;
    else
      s_tready_i <=1;
  end
  
  //always @(posedge clk) s_tready <= s_tready_i;

  always @(posedge clk)
  begin
    if (rst)
    begin
      read_idx<=0;
      write_idx<=0;
     // m_tvalid_i <= 'd0;
      m_tdata <=0;
    end
    else
    begin

      if (wea)
      begin

        if (read_idx == DD - 1) begin
                    read_idx <= 0;
                end else begin
                    read_idx <= read_idx + 1'b1;
                end
       
        
        addra<=read_idx;
      //  s_tdata_i<=s_tdata;
        ram[read_idx] <= s_tdata;
     //   m_tlast_i <= s_tlast;

      end
      if (enb) m_tdata <= ram[write_idx];
      if (enb) begin
       if (write_idx == DD - 1) begin
                    write_idx <= 0;
                end else begin
                    write_idx <= write_idx+1;
                end

      //  addrb<= write_idx;
      //  m_tdata <= ram[write_idx];//m_tdata_i;
       // m_tvalid <= 1;
      //  m_tlast_i <= fifo_empty;
      end
//      else
//      begin
//      //  wea<=0;
//        read_idx<=0;
//        addra<=0;
//   //     m_tvalid<=0;
//        write_idx<=0;
//        addrb<=0;
//      end
    end

  end

  
  assign s_tready= s_tready_i;
  //assign m_tlast = fifo_empty;
  assign m_tvalid = enb?1:0;
  assign wea = s_tvalid && s_tready;
  assign enb = m_tready ;


endmodule

*/
