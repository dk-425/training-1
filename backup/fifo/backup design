`timescale 1ns / 1ps

module axis_fifo #(
    parameter AW = 12,
    parameter DW = 16,
    parameter DD = 2048)(

      input                  clk,
      input                  rst,

      input    [DW-1   :0]   s_tdata,
      input                  s_tvalid,
      input                  s_tlast,
      output                 s_tready,

      output   logic [DW-1   :0]   m_tdata,
      output   logic               m_tvalid,
      output   logic               m_tlast,
      input                  m_tready,
      output                 full,
      output                 empty
    );

  logic [DW :0] s_tdata_i;
  logic [DW :0] m_tdata_i;
  logic [AW:0] read_idx, write_idx;
  logic [AW:0] addra, addrb;
  //logic enb,wea;
  logic s_tready_i,m_tvalid_i,m_tlast_i;
  logic fifo_full,fifo_empty,ll;

  bram #(
         .ADDR_WIDTH(AW),
         .DATA_WIDTH(DW)
       ) fifo_1(
         .clk(clk),
         .wea(wea),
      //   .addra(addra),
         .dina(s_tdata_i),
         .enb(enb),
      //   .addrb(write_idx),
         .doutb(m_tdata_i),
         .full(fifo_full),
         .empty(fifo_empty)
       //  .last(m_tlast_i)
       );

  always @(*)
  begin
    if (rst || fifo_full)
      s_tready_i <=0;
    else
      s_tready_i <=1;
  end

  always @(posedge clk)
  begin
    if (rst)
    begin
      read_idx<=0;
      write_idx<=0;

      m_tdata <=0;
    end
    end
//    else
//    begin

//      if (wea)
//      begin

//        if (read_idx == DD - 1) begin
//                    read_idx <= 0;
//                end else begin
//                    read_idx <= read_idx + 1'b1;
//                end
       
        
//        addra<=read_idx;
//        s_tdata_i<={s_tlast,s_tdata};
//      //  fifo_full_1 <= fifo_full;


//      end
//      if (enb) begin
//       if (write_idx == DD - 1) begin
//                    write_idx <= 0;
//                end else begin
//                    write_idx <= write_idx+1;
//                end

//        addrb<= write_idx;
//        {m_tlast,m_tdata} <= m_tdata_i;

//      end

//    end

  
//always @(posedge clk) begin
//fifo_full_1 <= fifo_full;
//fifo_full_2 <= fifo_full_1;
//fifo_full_3 <= fifo_full_2;
//if (enb) begin
//ll<=1;
//m_tvalid <=m_tvalid_i;
//end
//else begin
//ll<=0;
//m_tvalid<=0;
//end
//end

  
  assign s_tready= s_tready_i;
  assign m_tvalid = enb && ~empty?1:0;
  assign wea = s_tvalid && s_tready ;
  assign enb = (m_tready)?1:0;
  assign m_tlast = m_tlast_i;
  assign full=fifo_full;
  assign empty=fifo_empty;
  assign s_tdata_i = wea?{s_tlast,s_tdata}:0;
  assign {m_tlast,m_tdata} = enb?m_tdata_i:0;


endmodule

