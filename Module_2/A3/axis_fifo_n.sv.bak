`timescale 1ns / 1ps

module axis_fifo #(
    parameter AW = 13,
    parameter DW = 16,
    parameter DD = 2048)(

      input                  clk,
      input                  rst,

      input    [DW-1   :0]   s_tdata,
      input                  s_tvalid,
      input                  s_tlast,
      output                 s_tready,

      output   [DW-1   :0]   m_tdata,
      output                 m_tvalid,
      output                 m_tlast,
      input                  m_tready
    );

  logic [DW-1 :0] s_tdata_i,m_tdata_i;
  //logic [DW-1 :0] s_tdata_1,s_tdata_2;
  logic [DW-1 :0] m_tdata_1,m_tdata_2;
  logic [AW-1:0] read_idx, write_idx;
  logic [AW -2:0] fifo1_r_idx, fifo1_w_idx, fifo2_r_idx, fifo2_w_idx;
  logic flag=0,enb1,enb2,wea1,wea2;
  logic m_tvalid_i,m_tlast_i,s_tready_i;


  always @(posedge clk)
  begin
    if (rst || flag)
      s_tready_i <=0;
    else
      s_tready_i <=1;
  end

  always @(posedge clk)
  begin
    if (rst)
    begin
      m_tdata_i <= 0;
      m_tvalid_i <= 0;
      m_tlast_i <= 0;
      read_idx<=0;
      write_idx<=0;
    end
    else
    begin

      if (s_tvalid && s_tready && ~s_tlast)
      begin
        if (read_idx==4095)
        begin
          read_idx <=0;
          flag<=1;
          wea1<=0;
          wea2<=0;
          fifo1_r_idx<=0;
          fifo2_r_idx<=0;
        end

        else
        begin

            read_idx=read_idx+1;
          if (read_idx<2048)
          begin
            wea1<=1;
            wea2<=0;
            fifo1_r_idx<=read_idx;
            fifo2_r_idx<=0;
          end
          else
          begin
            wea2<=1;
            wea1<=0;
            fifo2_r_idx<=read_idx-2048;
            fifo1_r_idx<=0;
          end

        end

      end
      else begin
        wea1<=0;
        wea2<=0;
        read_idx<=0;
        fifo1_r_idx<=0;
        fifo2_r_idx<=0;
      end

      if (m_tready && flag)
      begin
        if (write_idx==4095)
        begin
          write_idx <=0;
          flag <=0;
          m_tlast_i <=1;
          m_tvalid_i <=0;
          enb1 <=0;
          enb2 <=0;
          fifo2_w_idx<=0;
          fifo1_w_idx<=0;
        end
        else
        begin
          m_tvalid_i<=1;
            write_idx <= write_idx+1;
          if (write_idx<2048)
          begin
            enb1<=1;
            enb2<=0;
            m_tdata_i<=m_tdata_1;
            fifo1_w_idx<= write_idx;
            fifo2_w_idx<=0;
          end
          else
          begin
            enb2<=1;
            enb1<=0;
            m_tdata_i<=m_tdata_2;
            fifo2_w_idx <= write_idx-2048;
            fifo1_w_idx<=0;
          end

        end

      end

      else
      begin
        m_tvalid_i<=0;
        enb1<=0;
        enb2<=0;
        write_idx<=0;
        fifo2_w_idx<=0;
        fifo1_w_idx<=0;
      end
    end

  end




  assign m_tvalid=m_tvalid_i;
  assign m_tlast=m_tlast_i;
  assign m_tdata=m_tdata_i;
  assign s_tready=s_tready_i;

  bram #(
         .ADDR_WIDTH(AW),
         .DATA_WIDTH(DW)
       ) fifo_1(
         .clk(clk),
         .wea(wea1),
         .addra(read_idx),
         .dina(s_tdata_i),
         .enb(enb1),
         .addrb(write_idx),
         .doutb(m_tdata_1)
       );

  bram #(
         .ADDR_WIDTH(AW),
         .DATA_WIDTH(DW+DW)
       ) fifo_2(
         .clk(clk),
         .wea(wea2),
         .addra(read_idx),
         .dina(s_tdata_i),
         .enb(enb2),
         .addrb(write_idx),
         .doutb(m_tdata_2)
       );

  assign s_tdata_i = s_tdata;
endmodule

